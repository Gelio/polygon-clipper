/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 81);
/******/ })
/************************************************************************/
/******/ ({

/***/ 16:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: split into separate messages for FillData
Object.defineProperty(exports, "__esModule", { value: true });
var FillWorkerMessageType;
(function (FillWorkerMessageType) {
    FillWorkerMessageType[FillWorkerMessageType["FillData"] = 0] = "FillData";
    FillWorkerMessageType[FillWorkerMessageType["StartFill"] = 1] = "StartFill";
    FillWorkerMessageType[FillWorkerMessageType["FillStrips"] = 2] = "FillStrips";
    FillWorkerMessageType[FillWorkerMessageType["EndFill"] = 3] = "EndFill";
    FillWorkerMessageType[FillWorkerMessageType["LightVersor"] = 4] = "LightVersor";
})(FillWorkerMessageType = exports.FillWorkerMessageType || (exports.FillWorkerMessageType = {}));


/***/ }),

/***/ 6:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Color_1 = __webpack_require__(8);
const MAX_COLOR = 255;
class Vector3 {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static fromColor(color) {
        return new Vector3(color.r / MAX_COLOR, color.g / MAX_COLOR, color.b / MAX_COLOR);
    }
    static add(v1, v2) {
        return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
    }
    static subtract(v1, v2) {
        return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
    }
    static crossProduct(v1, v2) {
        return new Vector3(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
    }
    static dotProduct(v1, v2) {
        return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
    }
    static cosineAngle(v1, v2) {
        const dotProduct = Vector3.dotProduct(v1, v2);
        const length1 = v1.getLength();
        const length2 = v2.getLength();
        return dotProduct / (length1 * length2);
    }
    static fromNormalMap(r, g, b) {
        const x = r / 255 * 2 - 1;
        const y = g / 255 * 2 - 1;
        const z = b / 255;
        return new Vector3(x, y, z);
    }
    static multiplyComponents(v1, v2) {
        return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);
    }
    toColor() {
        const r = Math.floor(this.x * MAX_COLOR);
        const g = Math.floor(this.y * MAX_COLOR);
        const b = Math.floor(this.z * MAX_COLOR);
        return new Color_1.Color(r, g, b);
    }
    normalize() {
        const length = this.getLength();
        return new Vector3(this.x / length, this.y / length, this.z / length);
    }
    multiply(scale) {
        return new Vector3(this.x * scale, this.y * scale, this.z * scale);
    }
    getLength() {
        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
    }
    clone() {
        return new Vector3(this.x, this.y, this.z);
    }
    invert() {
        return new Vector3(-this.x, -this.y, -this.z);
    }
    floor() {
        const x = Math.floor(this.x);
        const y = Math.floor(this.y);
        const z = Math.floor(this.z);
        return new Vector3(x, y, z);
    }
}
exports.Vector3 = Vector3;


/***/ }),

/***/ 8:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Color {
    constructor(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.fillStyle = `rgb(${this.r}, ${this.g}, ${this.b})`;
    }
    static fromHexString(hexString) {
        const redPart = hexString.slice(1, 3);
        const greenPart = hexString.slice(3, 5);
        const bluePart = hexString.slice(5, 7);
        const red = parseInt(redPart, 16);
        const green = parseInt(greenPart, 16);
        const blue = parseInt(bluePart, 16);
        return new Color(red, green, blue);
    }
    static integerToPaddedHex(integer) {
        const hex = integer.toString(16);
        if (hex.length === 1) {
            return ` ${hex}`;
        }
        else {
            return hex;
        }
    }
    toHexString() {
        const redPart = Color.integerToPaddedHex(this.r);
        const greenPart = Color.integerToPaddedHex(this.g);
        const bluePart = Color.integerToPaddedHex(this.b);
        return `#${redPart + bluePart + greenPart}`;
    }
}
exports.Color = Color;


/***/ }),

/***/ 81:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Vector3_1 = __webpack_require__(6);
const FillWorkerMessageType_1 = __webpack_require__(16);
let appFillData;
let canvasWidth = 0;
let canvasHeight = 0;
let canvasImageData;
let lightDirectionVersor = new Vector3_1.Vector3(0, 0, 1);
let textureVectors = [];
let normalVectors = [];
let bumpVectors = [];
let distortedNormalVectors = [];
onmessage = (e) => {
    const messageType = e.data.type;
    switch (messageType) {
        case FillWorkerMessageType_1.FillWorkerMessageType.FillData:
            appFillData = e.data.appFillData;
            canvasWidth = e.data.width;
            canvasHeight = e.data.height;
            prepareVectors();
            break;
        case FillWorkerMessageType_1.FillWorkerMessageType.StartFill:
            canvasImageData = new ImageData(canvasWidth, canvasHeight);
            break;
        case FillWorkerMessageType_1.FillWorkerMessageType.FillStrips:
            fillStrips(e.data.fillStrips);
            break;
        case FillWorkerMessageType_1.FillWorkerMessageType.EndFill:
            respond();
            break;
        case FillWorkerMessageType_1.FillWorkerMessageType.LightVersor:
            const versorParts = e.data.versor;
            lightDirectionVersor = new Vector3_1.Vector3(versorParts.x, versorParts.y, versorParts.z);
            break;
        default:
            // tslint:disable-next-line no-console
            console.error('Unknown worker message type', messageType);
    }
};
function fillStrips(strips) {
    strips.forEach(strip => {
        const fromX = Math.max(Math.floor(strip.fromX), 0);
        const toX = Math.min(Math.floor(strip.toX), canvasWidth - 1);
        for (let x = fromX; x <= toX; x += 1) {
            putPixel(x, strip.y);
        }
    });
}
function putPixel(x, y) {
    const textureVector = textureVectors[x][y];
    const lightColor = appFillData.lightColor;
    const distortedNormalVector = distortedNormalVectors[x][y];
    // cos theta = v1 * v2 / (norm(v1) * norm(v2))
    // Since lightDirectionVersor and distortedNormalVector are unit vectors, cos theta is just
    // a dot product
    const cosTheta = Vector3_1.Vector3.dotProduct(lightDirectionVersor, distortedNormalVector);
    const result = Vector3_1.Vector3.multiplyComponents(textureVector, lightColor)
        .multiply(cosTheta)
        .floor();
    const index = (x + y * canvasImageData.width) * 4;
    canvasImageData.data[index] = result.x;
    canvasImageData.data[index + 1] = result.y;
    canvasImageData.data[index + 2] = result.z;
    canvasImageData.data[index + 3] = 255;
}
function respond() {
    postMessage(canvasImageData, [canvasImageData.data.buffer]);
}
function prepareVectors() {
    prepareTextureVectors();
    prepareNormalVectors();
    prepareBumpVectors();
    applyBumpVectors();
}
function prepareTextureVectors() {
    console.log('Preparing texture vectors');
    textureVectors = [];
    const backgroundTexture = appFillData.backgroundTexture;
    for (let x = 0; x < canvasWidth; x += 1) {
        const backgroundTextureX = x % backgroundTexture.width;
        textureVectors.push([]);
        for (let y = 0; y < canvasWidth; y += 1) {
            const backgroundTextureY = y % backgroundTexture.height;
            const index = (backgroundTextureX + backgroundTextureY * backgroundTexture.width) * 4;
            const r = backgroundTexture.data[index];
            const g = backgroundTexture.data[index + 1];
            const b = backgroundTexture.data[index + 2];
            textureVectors[x].push(new Vector3_1.Vector3(r, g, b));
        }
    }
}
function prepareNormalVectors() {
    console.log('Preparing normal vectors');
    normalVectors = [];
    const normalMap = appFillData.normalMap;
    for (let x = 0; x < canvasWidth; x += 1) {
        const normalMapX = x % normalMap.width;
        normalVectors.push([]);
        for (let y = 0; y < canvasWidth; y += 1) {
            const normalMapY = y % normalMap.height;
            const index = (normalMapX + normalMapY * normalMap.width) * 4;
            const r = normalMap.data[index];
            const g = normalMap.data[index + 1];
            const b = normalMap.data[index + 2];
            normalVectors[x].push(Vector3_1.Vector3.fromNormalMap(r, g, b));
        }
    }
}
function prepareBumpVectors() {
    console.log('Preparing bump vectors');
    bumpVectors = [];
    const heightMap = appFillData.heightMap;
    for (let x = 0; x < canvasWidth; x += 1) {
        const heightMapX = x % heightMap.width;
        bumpVectors.push([]);
        for (let y = 0; y < canvasWidth; y += 1) {
            const heightMapY = y % heightMap.height;
            const index = (heightMapX + heightMapY * heightMap.width) * 4;
            let dhx = 0;
            let dhy = 0;
            // TODO: fix this if heightmap is weird on the edges
            if (heightMapX < heightMap.width) {
                dhx = heightMap.data[index + 4] - heightMap.data[index];
            }
            if (heightMapY < heightMap.height) {
                dhy = heightMap.data[index + heightMap.width * 4] - heightMap.data[index];
            }
            const normalVector = normalVectors[x][y];
            const t = new Vector3_1.Vector3(1, 0, -normalVector.x);
            const b = new Vector3_1.Vector3(0, 1, -normalVector.y);
            const d = Vector3_1.Vector3.add(t.multiply(dhx), b.multiply(dhy));
            bumpVectors[x].push(d);
        }
    }
}
function applyBumpVectors() {
    console.log('Applying bump vectors (distorting normal vectors)');
    distortedNormalVectors = [];
    for (let x = 0; x < canvasWidth; x += 1) {
        distortedNormalVectors.push([]);
        for (let y = 0; y < canvasHeight; y += 1) {
            distortedNormalVectors[x].push(Vector3_1.Vector3.add(normalVectors[x][y], bumpVectors[x][y]).normalize());
        }
    }
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,